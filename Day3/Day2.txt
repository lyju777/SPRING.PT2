lombok
- 테이블을 구조화한 도메인 클래스(Entity, DTO, VO)에서 getter/setter 메소드와
toString, equals, hashCode등의 메서드를 어노테이션으로 사용할 수 있도록 해주는 라이브러리
- https://projectlombok.org/
- @Date : 자동으로 getter/Setter를 지원
- @AllArgsConstructor : 모든 매개변수를 지원하는 생성자를 생성
- @NoArgsConstructor : 매개변수가 없는 생성자를 생성
- @Builder : 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른
 표현 결과를 만들 수 있게 하는 패턴을 사용할 수 있음

JPA(Java Persistence API)
- 자바의 ORM 기술 표준
- 객체를 DB에 저장하고 관리할 때 개발자가 직접 SQL을 작성하지 않아도 됨
- JAP가 개발자 대신 적절한 SQL을 생성하여 DB에 전달하고, 객체를 자동으로 Mapping 해줌

Hibernate
- ORM 프레임워크 중 가장 많이 사용되는 프레임워크

📍 ORM(object-Relational Mapping)
- 객체와 관계형 DB를 매핑
- 객체를 마치 자바 컬렉션에 저장할 수 있고 적절한 SQL을 생성해서 DB객체에 저장

자바의 변수
Camel Case : 단어를 표기할 때 첫문자는 소문자로 시작하고 띄어쓰기 대신 대문자로 단어를 구분
    numKor, numEng ..

DB의 테이블, API정의, 통신규격
Snake Case : 단어를 표기할 때 모두 소문자로 표기하며, 띄어쓰기 대신 언더바(_)로 표기
    tb_member, vw_mem_select..

@Entity
- JAP에서 테이블을 자동으로 관리해주는 기능을 가진 객체를 생성하는 어노테이션
    JAP Entity <--------> Datablse DBTable

@Id
@GeneratiedValue
- insert 쿼리 전에 hibernate_sequence 테이블의 데이터에 대하여 select, update 쿼리가 실행되며 id 생성을
위해 hibernate_sequence 테이블의 시퀸스 값을 가져와 업데이트하고 그 값으로 id를 생성하여 insert 쿼리에 사용

jUnit
- java에서 독립된 단위테스트(Unit Test)를 지원해주는 프레임워크

Unit Test
- 소스코드의 특정 모듈이 의도된 대로 정확히 작동하는지 검증하는 절차
- 모든 함수와 메소드에 대한 테스트 케이스(Test Case)를 작성하는 절차

AutoWired
- 필요한 의존 객체의 "타입"에 해당하는 빈을 찾아 주입함
- 생성자, setter, 필드
- 의존성 주입이라고 부름


과제. User 클래스에 데이터를 Oracle에 저장하는 단위테스트 메소드를 작성
(id는 시퀸스로 일렬번호 등록)

Optional<T> 클래스
- java.util.Optional<T>
- 래퍼클래스
- Optional 인스턴스는 모든 타입의 참조변수를 저장
- 예상치 못한 NullPointerException 예외를 제공하는 메소드로 간단히 회피할 수 있음
- 복잡한 조건문 없이 null이 발생시키는 예외를 처리

과제.
test에 각 클래스에 맞는 RepositoryTest에 CRUD 할 수 있는 메소드를 작성
(Create에는 원하는 메소드를 추가하여 데이터를 가져오는 방법을 여러개 작성)

JPA의 즉시로딩과 지연로딩
FetchType
LAZY(즉시로딩)
- 참조 객체들의 데이터들은 무시하고 해당 엔티티의 데이터만을 가져옴
- 참조객체의 데이터를 사용하기 위해 여러번의 쿼리를 사용
EAGER(지연로딩)
- 하나의 객체를 DB로 부터 읽어 올때 참조 객체들의 데이터까지 전부 읽어오는 방식
- 한 번의 쿼리로 모든 정보를 가져옴

Auditor
- JPA를 활용할 떄 작성자, 수정자, 수정날짜, 아이디등 자동으로 값을 세팅해주는 기술

@Configuratrion : 어노테이션기반 환경설정을 도움

@Component
public class LoginUserAuditorAware implements AuditorAware<String> {
    @Override
    public Optional<String> getCurrentAuditor() {
        return Optional.of("최고관리자");
    }
}


과제.
    - 새로운 spring 프로젝트 Day3을 생성
    - rest api를 추가 ( item, ordergroup, partner )
    - 각 create, read, update, delete

다음시간 예고
    - 리팩토링
    - 프론트단



